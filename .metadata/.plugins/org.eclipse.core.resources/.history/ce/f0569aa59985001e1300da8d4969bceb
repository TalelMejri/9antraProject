package ma.app.productsapp.sec;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

import static org.springframework.security.config.http.SessionCreationPolicy.STATELESS;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthConverter jwtAuthConverter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    
        http
        http.csrf().disable()
        .authorizeRequests()
        .antMatchers("/signup").permitAll()
		.antMatchers("/login").permitAll()
		.antMatchers("/verifyAccount").permitAll()
		.antMatchers("/FotgotPassword").permitAll()
		.antMatchers("/ChangerPassword").permitAll()
		.anyRequest().authenticated()
	    .and()
	    .exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint).and().sessionManagement()
		.sessionCreationPolicy(SessionCreationPolicy.STATELESS);



        http
                .oauth2ResourceServer()
                .jwt()
                .jwtAuthenticationConverter(jwtAuthConverter);


        http
                .sessionManagement()
                .sessionCreationPolicy(STATELESS);

        return http.build();
    }
}

